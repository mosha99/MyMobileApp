@page "/game"
@using CommandANDQuery;
@using CommandANDQuery.Games.Commands;

@inherits CustomCumponnetnBase

@inject ISender sender

@inject NavigationManager NavigationManager

@if (showList)
{
    <ListGame Games="Games" OnManageClick="ManageGame" OnAddClick="AddGame" OnDeleteClick="ExicuteCumand" OnEditClick="EditGame"></ListGame>
}
else
{
    <EditGame game="game" onSubmit="ExicuteCumand"></EditGame>
}

@if (showMessage)
{
    <Message MessageInfo="messageInfo" counter="counter" onCloseClick="HideMessage" onResponse="MessageResponse"></Message>
}

@code {

    bool showList = true;
    List<Models.Game> Games { set; get; }
    Models.Game game { set; get; }


    public override ISender GetSender() => sender;

    public override async Task AfterExicute<T>(CustomRequest<T> request)
    {
        showList = true;
        await ReFetchGames();
    }

    protected override async Task OnInitializedAsync()
    {
        await ReFetchGames();
        await base.OnInitializedAsync();
    }

    void ManageGame(Models.Game game)
    {
        NavigationManager.NavigateTo($"GameDetail?id={game.Id}");

    }

    void AddGame()
    {
        showList = false;
        game = new Models.Game();
    }

    void EditGame(Models.Game game)
    {
        showList = false;
        this.game = game;
    }

    async Task ReFetchGames()
    {
        Games = await sender.Send(new GetGamesCommand());
    }

}