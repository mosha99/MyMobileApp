@using CommandANDQuery.Financial.Commands;
@using Share;
@inject ISender Sender ;


<a @onclick="back" class="btn btn-light" style="margin-top: 30px;margin-bottom:10px; margin-right: 7px;">@LangResource.Back</a>

<div class="d-flex flex-column" style="padding: 15px;">
    <label class="form-label">@LangResource.Amount</label>
    <input type="number" @bind-value="Amount" />
</div>

<div class="d-flex flex-column" style="padding: 15px;">
    <label class="form-label">@LangResource.TrancactionType</label>

    <select @bind="ActionType" class="form-select" aria-label="Default select example">
        <option value="@((int)TranCActionType.lend)">@LangResource.lend</option>
        <option value="@((int)TranCActionType.Borrow)">@LangResource.Borrow</option>
    </select>

</div>

<div class="d-flex flex-column" style="padding: 15px;">
    <label class="form-label">@LangResource.RemindDay</label>
    <input type="number" @bind-value="RemainingDay" />
</div>

@foreach (var item in Errors)
{
    <p>
        @foreach (var error in item.Value)
        {
            <hr />
            <span style="color:red">&nbsp;-&nbsp;&nbsp;@error</span>
        }
    </p>
}

<div>
    <div class="d-flex flex-column" style="padding: 0;">
        <button @onclick="Submit" class="btn btn-light" type="button" style="margin-top: 21px;margin-right: 7px;">@LangResource.Submit</button>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<bool> closeChanged { set; get; }

    [Parameter]
    public bool close { set; get; }

    [Parameter]
    public int PersonId { set; get; }

    decimal Amount { set; get; }

    int ActionType { set; get; } = (int)TranCActionType.lend;

    int RemainingDay { set; get; }

    public Dictionary<string, IEnumerable<string>> Errors = new();


    public async Task Submit()
    {

        IRequest<CustomResponse> request = new AddTranCActionCommand(PersonId, Amount, (TranCActionType)ActionType, RemainingDay);

        CustomResponse response = await Sender.Send(request);

        if (response.ResponseType == ResponseType.Success)
        {
            await back();
        }
        else
        {
            Errors = response.ValidationErrors;
        }

    }
    async Task back()
    {

        close = true;
        Errors = new();
        await closeChanged.InvokeAsync(close);
        this.StateHasChanged();
    }
}
